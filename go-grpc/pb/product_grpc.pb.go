// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Products_GetProduct_FullMethodName    = "/products.Products/GetProduct"
	Products_GetProducts_FullMethodName   = "/products.Products/GetProducts"
	Products_CreateProduct_FullMethodName = "/products.Products/CreateProduct"
)

// ProductsClient is the client API for Products service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsClient interface {
	GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Product, error)
	GetProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Products_GetProductsClient, error)
	CreateProduct(ctx context.Context, opts ...grpc.CallOption) (Products_CreateProductClient, error)
}

type productsClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsClient(cc grpc.ClientConnInterface) ProductsClient {
	return &productsClient{cc}
}

func (c *productsClient) GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, Products_GetProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Products_GetProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Products_ServiceDesc.Streams[0], Products_GetProducts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productsGetProductsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Products_GetProductsClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type productsGetProductsClient struct {
	grpc.ClientStream
}

func (x *productsGetProductsClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productsClient) CreateProduct(ctx context.Context, opts ...grpc.CallOption) (Products_CreateProductClient, error) {
	stream, err := c.cc.NewStream(ctx, &Products_ServiceDesc.Streams[1], Products_CreateProduct_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productsCreateProductClient{stream}
	return x, nil
}

type Products_CreateProductClient interface {
	Send(*Product) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type productsCreateProductClient struct {
	grpc.ClientStream
}

func (x *productsCreateProductClient) Send(m *Product) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productsCreateProductClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductsServer is the server API for Products service.
// All implementations must embed UnimplementedProductsServer
// for forward compatibility
type ProductsServer interface {
	GetProduct(context.Context, *ProductRequest) (*Product, error)
	GetProducts(*emptypb.Empty, Products_GetProductsServer) error
	CreateProduct(Products_CreateProductServer) error
	mustEmbedUnimplementedProductsServer()
}

// UnimplementedProductsServer must be embedded to have forward compatible implementations.
type UnimplementedProductsServer struct {
}

func (UnimplementedProductsServer) GetProduct(context.Context, *ProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductsServer) GetProducts(*emptypb.Empty, Products_GetProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedProductsServer) CreateProduct(Products_CreateProductServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductsServer) mustEmbedUnimplementedProductsServer() {}

// UnsafeProductsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsServer will
// result in compilation errors.
type UnsafeProductsServer interface {
	mustEmbedUnimplementedProductsServer()
}

func RegisterProductsServer(s grpc.ServiceRegistrar, srv ProductsServer) {
	s.RegisterService(&Products_ServiceDesc, srv)
}

func _Products_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductsServer).GetProducts(m, &productsGetProductsServer{stream})
}

type Products_GetProductsServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type productsGetProductsServer struct {
	grpc.ServerStream
}

func (x *productsGetProductsServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func _Products_CreateProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductsServer).CreateProduct(&productsCreateProductServer{stream})
}

type Products_CreateProductServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Product, error)
	grpc.ServerStream
}

type productsCreateProductServer struct {
	grpc.ServerStream
}

func (x *productsCreateProductServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productsCreateProductServer) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Products_ServiceDesc is the grpc.ServiceDesc for Products service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Products_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "products.Products",
	HandlerType: (*ProductsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _Products_GetProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProducts",
			Handler:       _Products_GetProducts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateProduct",
			Handler:       _Products_CreateProduct_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/product.proto",
}
